openapi: 3.0.3
info:
  title: So-Cook API
  description: >
    MVP API for **So-Cook**, enabling citizens of Paris to share and trade dishes and
    primary components prepared from local edible-forest and kitchen-garden produce.
    This specification covers the minimal-viable-product feature set.
  version: 0.1.0

servers:
  - url: https://api.so-cook.paris/v1
    description: Production
  - url: https://staging.api.so-cook.paris/v1
    description: Staging
  - url: http://localhost:3000/v1
    description: Local development

# -----------------------------------------------------------------------------
#  Tags
# -----------------------------------------------------------------------------
tags:
  - name: Auth
    description: User authentication & token management
  - name: Users
    description: Registration & profile management
  - name: Products
    description: Dishes / ingredients visible to customers
  - name: Sellers
    description: Public seller page & catalog
  - name: Cart
    description: Shopping-cart (basket) operations
  - name: Orders
    description: Checkout & order tracking

# -----------------------------------------------------------------------------
#  Components
# -----------------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ---------------- Auth ----------------
    UserRegistration:
      type: object
      required: [first_name, last_name, email, password]
      properties:
        first_name: {type: string, example: "Meg"}
        last_name:  {type: string, example: "Quete"}
        email:      {type: string, format: email, example: "meg@example.com"}
        password:   {type: string, format: password, example: "secretPass123!"}

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:    {type: string, format: email}
        password: {type: string, format: password}

    # --------------- Domain ---------------
    GeoPoint:
      type: object
      required: [lat, lng]
      properties:
        lat: {type: number, format: double, example: 48.8584}
        lng: {type: number, format: double, example: 2.2945}

    User:
      type: object
      properties:
        id:        {type: string, format: uuid}
        username:  {type: string}
        email:     {type: string, format: email}
        address:   {type: string}
        bio:       {type: string}
        avatarUrl: {type: string, format: uri}
        createdAt: {type: string, format: date-time}

    # ------------- Products --------------
    ProductOverview:
      type: object
      properties:
        id_seller:           {type: integer, example: 42}
        product_images:
          type: array
          items: {type: string, format: uri}
        seller_name:         {type: string, example: "Jardin de Léo"}
        latitude:            {type: number, format: double}
        longitude:           {type: number, format: double}
        average_seller_rate: {type: number, format: float, example: 4.7}

    ProductDetailed:
      allOf:
        - $ref: '#/components/schemas/ProductOverview'
        - type: object
          properties:
            product_price:       {type: number, format: double, example: 6.50}
            product_description: {type: string}
            product_title:       {type: string, example: "Tarte tomates & basilic"}

    # ---------- Seller page --------------
    SellerProductItem:
      type: object
      properties:
        id_product:          {type: integer, format: int64}
        product_image:       {type: string, format: uri}
        product_description: {type: string}
        product_title:       {type: string}
        product_price:       {type: number, format: double}
        product_weight:      {type: number, format: double}
        created_at:          {type: string, format: date-time}
        product_type:        {type: string, example: "cooked"}

    SellerCatalog:
      type: object
      properties:
        seller_name:         {type: string}
        latitude:            {type: number, format: double}
        longitude:           {type: number, format: double}
        average_seller_rate: {type: number, format: float}
        products:
          type: array
          items: {$ref: '#/components/schemas/SellerProductItem'}

    # ---------- Basket (Cart) ------------
    BasketItem:
      type: object
      properties:
        id_product_basket:  {type: integer, format: int64}
        id_product:         {type: integer, format: int64}
        id_seller:          {type: integer}
        product_title:      {type: string}
        product_description: {type: string}
        product_price:      {type: number, format: double}

    Basket:
      type: array
      items: {$ref: '#/components/schemas/BasketItem'}

    BasketAddInput:
      type: object
      required: [id_product, id_seller]
      properties:
        id_product: {type: integer, format: int64}
        id_seller:  {type: integer}

    # ---------- Order --------------------
    Order:
      type: object
      properties:
        id:        {type: string, format: uuid}
        userId:    {type: string, format: uuid}
        total:     {type: number, format: double}
        status:    {type: string, enum: [pending, confirmed, delivered, canceled]}
        createdAt: {type: string, format: date-time}

    Error:
      type: object
      properties:
        code:    {type: string}
        message: {type: string}

  responses:
    UnauthorizedError:
      description: JWT is missing or invalid
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}

# -----------------------------------------------------------------------------
#  Paths
# -----------------------------------------------------------------------------
paths:

  # ---------- AUTH ----------
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user and receive a token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UserRegistration'}
      responses:
        '201':
          description: Registration successful — JWT returned
          content:
            application/json:
              schema: {type: object, properties: {token: {type: string}}}

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and obtain JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UserLogin'}
      responses:
        '200':
          description: Authentication successful — JWT returned
          content:
            application/json:
              schema: {type: object, properties: {token: {type: string}}}

  # ---------- USERS ----------
  /users/me:
    get:
      tags: [Users]
      summary: Current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

    put:
      tags: [Users]
      summary: Update current user profile
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/User'}
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

  # ---------- PRODUCTS ----------
  /products:
    get:
      tags: [Products]
      summary: List available products (overview)
      security: []
      parameters:
        - {in: query, name: type,   schema: {type: string, enum: [cooked, ingredient]}, description: Product type filter}
        - {in: query, name: lat,    schema: {type: number, format: double}}
        - {in: query, name: lng,    schema: {type: number, format: double}}
        - {in: query, name: limit,  schema: {type: integer, default: 20}}
        - {in: query, name: offset, schema: {type: integer, default: 0}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ProductOverview'}

  /products/search:
    get:
      tags: [Products]
      summary: Search products by producer name or keywords
      security: []
      parameters:
        - {in: query, name: searchText, schema: {type: string}, required: true}
        - {in: query, name: type,       schema: {type: string, enum: [cooked, ingredient]}}
        - {in: query, name: lat,        schema: {type: number, format: double}}
        - {in: query, name: lng,        schema: {type: number, format: double}}
        - {in: query, name: limit,      schema: {type: integer, default: 20}}
        - {in: query, name: offset,     schema: {type: integer, default: 0}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ProductDetailed'}

  # ---------- SELLER PAGE ----------
  /sellers/{sellerId}:
    parameters:
      - in: path
        name: sellerId
        required: true
        schema: {type: integer}
    get:
      tags: [Sellers]
      summary: Public seller profile with product catalog
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SellerCatalog'}

  # ---------- BASKET ----------
  /cart/{customerId}:
    parameters:
      - in: path
        name: customerId
        required: true
        schema: {type: string, format: uuid}
    get:
      tags: [Cart]
      summary: Retrieve basket for a customer
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Basket'}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

    post:
      tags: [Cart]
      summary: Add a product to the basket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BasketAddInput'}
      responses:
        '200':
          description: Item added – returns updated basket
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Basket'}
        '400': {description: Bad request – invalid IDs}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

  /cart/{customerId}/items/{basketItemId}:
    parameters:
      - in: path
        name: customerId
        required: true
        schema: {type: string, format: uuid}
      - in: path
        name: basketItemId
        required: true
        schema: {type: integer, format: int64}
    delete:
      tags: [Cart]
      summary: Remove an item from the basket
      security: [{ bearerAuth: [] }]
      responses:
        '200': {description: Item removed}
        '400': {description: Bad request – invalid IDs}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

  # ---------- ORDERS ----------
  /orders:
    get:
      tags: [Orders]
      summary: List orders for current user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Order'}
        '401': {$ref: '#/components/responses/UnauthorizedError'}

  /orders/{orderId}:
    parameters:
      - {in: path, name: orderId, required: true, schema: {type: string, format: uuid}}
    get:
      tags: [Orders]
      summary: Get order by ID
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Order'}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
